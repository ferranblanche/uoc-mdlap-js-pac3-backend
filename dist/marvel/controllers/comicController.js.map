{"version":3,"sources":["../../../src/marvel/controllers/comicController.js"],"names":["searchComicById","id","keys","baseUrl","sugar","hash","query","public","result","comic","data","results","Error","title","plot","description","error","searchComicsByCharacter","comics","length","map"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;AAEA;AACO,IAAIA,4CAAkB,MAAOC,EAAP,IAAc;AACvC,QAAI,EAAEC,IAAF,EAAQC,OAAR,EAAiBC,KAAjB,EAAwBC,IAAxB,KAAiC,gCAArC;AACA,QAAIC,QAAS,GAAEH,OAAQ,WAAUF,EAAG,OAAMG,KAAM,WAAUF,KAAKK,MAAO,SAAQF,IAAK,EAAnF;AACA,QAAI;AACA,YAAIG,SAAS,MAAM,qBAAMF,KAAN,CAAnB;AACA,YAAIG,QAAQD,OAAOE,IAAP,CAAYA,IAAZ,CAAiBC,OAAjB,CAAyB,CAAzB,CAAZ;AACA,YAAI,CAACF,KAAL,EAAY;AACR,kBAAM,IAAIG,KAAJ,CAAW,kCAAiCX,EAAG,EAA/C,CAAN;AACH;AACD,eAAO;AACHA,gBAAIQ,MAAMR,EADP;AAEHY,mBAAOJ,MAAMI,KAFV;AAGHC,kBAAML,MAAMM;AAHT,SAAP;AAKH,KAXD,CAWE,OAAOC,KAAP,EAAc;AACZ,cAAM,IAAIJ,KAAJ,CAAUI,KAAV,CAAN;AACH;AACJ,CAjBM;;AAmBP;AACO,IAAIC,4DAA0B,MAAOhB,EAAP,IAAc;AAC/C,QAAI,EAAEC,IAAF,EAAQC,OAAR,EAAiBC,KAAjB,EAAwBC,IAAxB,KAAiC,gCAArC;AACA,QAAIC,QAAS,GAAEH,OAAQ,sBAAqBF,EAAG,OAAMG,KAAM,WAAUF,KAAKK,MAAO,SAAQF,IAAK,EAA9F;AACA,QAAI;AACA,YAAIG,SAAS,MAAM,qBAAMF,KAAN,CAAnB;AACA,YAAIY,SAASV,OAAOE,IAAP,CAAYA,IAAZ,CAAiBC,OAA9B;AACA,YAAIO,OAAOC,MAAP,IAAiB,CAArB,EAAwB;AACpB,kBAAM,IAAIP,KAAJ,CAAW,oDAAmDX,EAAG,UAAjE,CAAN;AACH;AACD,eAAOiB,OAAOE,GAAP,CAAWX,SAAS;AACvB,mBAAO;AACHI,uBAAOJ,MAAMI,KAAN,IAAe,EADnB;AAEHC,sBAAML,MAAMM,WAAN,IAAqB,EAFxB;AAGHd,oBAAIQ,MAAMR;AAHP,aAAP;AAKH,SANM,CAAP;AAOH,KAbD,CAaE,OAAOe,KAAP,EAAc;AACZ,cAAM,IAAIJ,KAAJ,CAAUI,KAAV,CAAN;AACH;AACJ,CAnBM","file":"comicController.js","sourcesContent":["import axios from 'axios';\nimport getConnectionParams from '../resources/marvel-api-params';\n\n// Search Comic by Id\nexport var searchComicById = async (id) => {\n    let { keys, baseUrl, sugar, hash } = getConnectionParams();\n    let query = `${baseUrl}/comics/${id}?ts=${sugar}&apikey=${keys.public}&hash=${hash}`;\n    try {\n        let result = await axios(query);\n        let comic = result.data.data.results[0];\n        if (!comic) {\n            throw new Error(`Unable to find a comic with id ${id}`);\n        }\n        return {\n            id: comic.id,\n            title: comic.title,\n            plot: comic.description\n        };\n    } catch (error) {\n        throw new Error(error);\n    };\n};\n\n// Search Comic by Character\nexport var searchComicsByCharacter = async (id) => {\n    let { keys, baseUrl, sugar, hash } = getConnectionParams();\n    let query = `${baseUrl}/comics?characters=${id}&ts=${sugar}&apikey=${keys.public}&hash=${hash}`;\n    try {\n        let result = await axios(query);\n        let comics = result.data.data.results;\n        if (comics.length == 0) {\n            throw new Error(`Unable to find a comic where a character with id ${id} appears`);\n        }\n        return comics.map(comic => {\n            return {\n                title: comic.title || \"\",\n                plot: comic.description || \"\",\n                id: comic.id\n            };\n        });\n    } catch (error) {\n        throw new Error(error);\n    };\n};"]}